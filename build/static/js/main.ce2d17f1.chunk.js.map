{"version":3,"sources":["components/PriceTable.jsx","components/Utils.jsx","components/Chart.jsx","components/Settings.jsx","components/TitleBar.jsx","App.js","index.js"],"names":["Row","data","prevTicker","onSymbolClick","variation24","forEach","key","i","symbol","priceChangePercent","href","onClick","e","preventDefault","target","text","price","variation","className","Math","round","longVariation","Table","rows","line","push","id","PriceTable","prices","title","onOpenChart","Loader","role","Chart","interval","chartDiv","React","LightweightCharts","window","candleSeries","createChart","current","width","height","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","crosshair","mode","CrosshairMode","Normal","rightPriceScale","borderColor","timeScale","addCandlestickSeries","upColor","downColor","borderDownColor","borderUpColor","wickDownColor","wickUpColor","setData","WebSocket","onmessage","event","newCandle","JSON","parse","k","update","time","t","open","o","high","h","low","l","close","c","ref","ChartBox","onClose","loading","setLoading","error","setError","timeframe","setTimeFrame","fetch","then","r","json","errorStatus","handleTimeClick","innerText","toLowerCase","disabled","RadioButton","name","checked","type","readOnly","htmlFor","Settings","settings","onSettingsChange","minDelay","delay","setDelay","selectedSymbol","setSelectedSymbol","onChange","value","TitleBar","start","reload","setReload","setTime","timerInterval","setInterval","clearInterval","timeSpend","Date","now","console","log","timeString","minutes","trunc","milliseconds","seconds","hours","minutesLeft","secondsLeft","MINIMUM_DELAY","App","symbolFilter","setSymbolFilter","refreshDelay","setRefreshDelay","reloadPrevTicker","setReloadPrevTicker","setPrices","setPrevTicker","bestCoins","setBestCoins","worstCoins","setWorstCoins","startTime","setStartTime","showChart","setShowChart","chartSymbol","setChartSymbol","prevTickerInterval","length","previousPrice","percentVariation","cumulVariation","bestCoinsList","filter","endsWith","worstCoinsList","sort","oneLine","anotherLine","slice","handleShowChart","currentSettings","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce2d17f1.chunk.js","sourcesContent":["import * as React from 'react'\n\nconst Row = ({data, prevTicker, onSymbolClick}) => {\n    const handleSymbolClick = (e) => {\n        e.preventDefault()\n        onSymbolClick(e.target.text)\n    }\n    // get 24hour variation pour ticker \n    let variation24 = 0\n    prevTicker.forEach((key, i) => {\n        if (key.symbol === data.symbol) {\n            variation24 = key.priceChangePercent\n        }\n    })\n    return <tr>\n        <td><a href=\"/#\" onClick={handleSymbolClick}>{data.symbol}</a></td>\n        <td>{data.price}</td>\n        {data.variation > 0 ? \n            <td className=\"text-success\">{data.variation}</td> :\n            <td className=\"text-danger\">{data.variation}</td>\n        }\n        <td>{Math.round(data.longVariation * 1000) / 1000}</td>\n        <td>{variation24}</td>\n    </tr>\n}\n\nconst Table = ({data, prevTicker, onSymbolClick}) => {\n    // Build table rows\n    let rows = []\n    data.forEach((line, i) => {\n        rows.push(<Row key={i} data={line} prevTicker={prevTicker} onSymbolClick={onSymbolClick}/>)\n    })\n    \n    return <table id=\"priceTable\" className=\"table\">\n        <thead>\n            <tr>\n                <th>Symbol</th>\n                <th>Price</th>\n                <th>Last %</th>\n                <th><span className=\"golden\">Cumul %</span></th>\n                <th>24h %</th>\n            </tr>\n        </thead>\n        <tbody>\n            {rows}\n        </tbody>\n    </table>\n}\n\nconst PriceTable = ({prices, title, prevTicker, onOpenChart}) => {\n    return <React.Fragment>\n        <h2>{title}</h2>\n        <Table data={prices} prevTicker={prevTicker} onSymbolClick={onOpenChart}/>\n    </React.Fragment>\n}\n\nexport default PriceTable;","import * as React from 'react'\n\nexport const Loader = () => {\n    return <div className=\"spinner-border text-warning\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n    </div>\n}\n\n\n\n","import * as React from 'react'\nimport './chart.css'\nimport {Loader} from './Utils'\n\nconst Chart = ({data, symbol, interval}) => {\n    const chartDiv = React.useRef(null)\n    // On mount, setup Chart\n    React.useEffect(() => {\n        // Set chart options\n        const LightweightCharts = window.LightweightCharts\n        // const chart = LightweightCharts.createChart(document.querySelector('#Chart'), {\n        const chart = LightweightCharts.createChart(chartDiv.current, {\n            width: 800,\n            height: 400,\n            layout: {\n                backgroundColor: '#FFF',\n                textColor: '#000',\n            },\n            grid: {\n                vertLines: {color: 'rgba(197, 203, 206, 0.5)',},\n                horzLines: {color: 'rgba(197, 203, 206, 0.5)',},\n            },\n            crosshair: {mode: LightweightCharts.CrosshairMode.Normal,},\n            rightPriceScale: {borderColor: 'rgba(197, 203, 206, 0.8)',},\n            timeScale: {borderColor: 'rgba(197, 203, 206, 0.8)',},\n        });\n        // Set candleSeries object\n        let candleSeries = chart.addCandlestickSeries({\n            upColor: 'rgba(0, 255, 0, 1)',\n            downColor: 'rgba(255, 0, 0, 1)',\n            borderDownColor: 'rgba(255, 0, 0, 1)',\n            borderUpColor: 'rgba(0, 255, 0, 1)',\n            wickDownColor: 'rgba(255, 0, 0, 1)',\n            wickUpColor: 'rgba(0, 255, 0, 1)'\n        });\n        // Give historical data to candleSeries\n        candleSeries.setData(data)\n        // Set socket connection, on message update candleSeries\n        const url = \"wss://stream.binance.com:9443/ws/\" + symbol + \"@kline_\" + interval\n        const socket = new WebSocket(url)\n        socket.onmessage = function (event) {\n            const messageObject = JSON.parse(event.data)\n            const newCandle = messageObject.k\n            candleSeries.update({\n                time: newCandle.t / 1000,\n                open: newCandle.o,\n                high: newCandle.h,\n                low: newCandle.l,\n                close: newCandle.c\n            })\n        }\n    }, [data, symbol, interval]);\n    return <div id=\"Chart\" ref={chartDiv}></div>\n}\n\nconst ChartBox = ({onClose, symbol}) => {\n    const [loading, setLoading] = React.useState(true)\n    const [error, setError] = React.useState(false)\n    const [data, setData] = React.useState([])\n    const [timeframe, setTimeFrame] = React.useState(\"5m\")\n    \n    React.useEffect(() => {\n        const url = \"/api/history/\" + symbol + \"/\" + timeframe\n        fetch(url).then(r => r.json()).then(data => {\n            if (data.errorStatus) {\n                setError(true)\n            } else {\n                setData(data)\n                setLoading(false)\n            } \n        });\n    }, [symbol, timeframe])\n\n    const handleCloseClick = (e) => {\n        e.preventDefault()\n        onClose()\n    }\n    const handleTimeClick = (e) => {\n        e.preventDefault()\n        setLoading(true)\n        setTimeFrame(e.target.innerText)\n    }\n    return <div id=\"chartBox\">\n        <a href=\"/#\" onClick={handleCloseClick} id=\"chartCloser\"><i className=\"fas fa-times-circle\"></i></a>\n        {loading ? <Loader/> : <>\n            <div id=\"chartTitle\">\n                <h3>{symbol} ({timeframe})</h3>\n            </div>\n            <Chart data={data} symbol={symbol.toLowerCase()} interval={timeframe}/>\n            <div id=\"chartTimeframe\">\n                <button onClick={handleTimeClick} disabled={timeframe===\"1m\"}>1m</button>\n                <button onClick={handleTimeClick} disabled={timeframe===\"5m\"}>5m</button>\n                <button onClick={handleTimeClick} disabled={timeframe===\"15m\"}>15m</button>\n                <button onClick={handleTimeClick} disabled={timeframe===\"1h\"}>1h</button>\n                <button onClick={handleTimeClick} disabled={timeframe===\"1d\"}>1d</button>\n            </div>\n        </>}\n        {error ? <h2>Error.. Try again..</h2> : null}\n    </div>\n}\n\nexport default ChartBox;","import * as React from 'react'\n\nconst RadioButton = ({ name, checked }) => {\n    return <div className=\"form-check\">\n        <input className=\"form-check-input\" type=\"radio\" name={name} id={name} checked={checked} readOnly />\n        <label className=\"form-check-label\" htmlFor={name}>{name}</label>\n    </div>\n}\n\nconst Settings = ({ settings, onSettingsChange, minDelay }) => {\n    const [delay, setDelay] = React.useState(settings.delay / 1000)\n    const [selectedSymbol, setSelectedSymbol] = React.useState(\"USDT\")\n    const handleChangeDelay = (e) => {\n        e.preventDefault()\n        setDelay(e.target.value)\n    }\n    const handleSubmitClick = (e) => {\n        e.preventDefault()\n        const settings = {\n            delay: delay,\n            selectedSymbol: selectedSymbol\n        }\n        onSettingsChange(settings)\n    }\n    const handleChangeSymbol = (e) => {\n        setSelectedSymbol(e.target.name)\n    }\n    return <div className=\"settingsBar\">\n        <div className=\"barHeader\">\n            <div>\n                <h2>Settings</h2>\n            </div>\n            <div className=\"currentValues\">\n                <div>Current symbol filter : {settings.symbol}</div>\n                <div>Current refresh delay : {settings.delay / 1000} secs</div>\n            </div>\n        </div>\n        <form className=\"barItems\">\n            <div className=\"form-group setSymbol\" onChange={handleChangeSymbol}>\n                <label>Filter symbol pairs</label>\n                <RadioButton name=\"USDT\" checked={selectedSymbol === \"USDT\"} />\n                <RadioButton name=\"BTC\" checked={selectedSymbol === \"BTC\"} />\n            </div>\n            <div className=\"form-group setDelay\">\n                <label htmlFor=\"refreshDelayInput\" className=\"form-label\">Refresh prices (min : {minDelay / 1000} secs)</label>\n                <input type=\"text\" id=\"refreshDelayInput\" className=\"form-control\" value={delay} onChange={handleChangeDelay} />\n            </div>\n            <button className=\"btn btn-info setSubmit\" onClick={handleSubmitClick}>Set</button>\n        </form>\n    </div>\n}\n\nexport default Settings;","import * as React from 'react'\n\nconst TitleBar = ({start}) => {\n    const [reload, setReload] = React.useState(0)\n    const [time, setTime] = React.useState('')\n    // Create an interval to reload prices\n    React.useEffect(() => { \n      let timerInterval = setInterval(() => setReload(c => c + 1), (1000))\n      return () => clearInterval(timerInterval)\n    }, [])\n    React.useEffect(() => {\n      const timeSpend = Date.now() - start\n      console.log(timeSpend)\n      // if less than 1 minute\n      if ((timeSpend / 1000) < 60) {\n        const timeString = Math.round(timeSpend / 1000) + \" s\"\n        setTime(timeString)\n      // if less than 1 hour\n      } else if ((timeSpend / 1000) < 3600) {\n        const minutes = Math.trunc(timeSpend / 1000 / 60)\n        const milliseconds = (timeSpend - (minutes * 60 * 1000))\n        const seconds = Math.round(milliseconds / 1000)\n        const timeString = minutes + \"m \" + seconds + \"s\"\n        setTime(timeString)\n      // if more than 1 hours\n      } else {\n        const hours = Math.trunc(timeSpend / 1000 / 60 / 60)\n        const minutesLeft = timeSpend - (hours * 3600 * 1000)\n        const minutes = Math.trunc(minutesLeft / 1000 / 60)\n        const secondsLeft = minutesLeft - (minutes * 60 * 1000)\n        // const milliseconds = (timeSpend - (minutes * 60 * 1000))\n        const seconds = Math.round(secondsLeft / 1000)\n        const timeString = hours + \"h \" + minutes + \"m \" + seconds + \"s\"\n        setTime(timeString)\n      }\n    }, [reload])\n    \n    return <div className=\"titleBar golden\">\n      <div>\n        <h1>Binance Market</h1>\n      </div>\n      <div className=\"timeSpendDiv\">\n        <h3>Time spend : {time}</h3>\n      </div>\n    </div>\n  }\n\n  export default TitleBar;","import * as React from 'react'\nimport PriceTable from './components/PriceTable'\nimport ChartBox from './components/Chart'\nimport Settings from './components/Settings'\nimport TitleBar from './components/TitleBar'\n\nconst MINIMUM_DELAY = 3000\nconst FILTER_SYMBOL = 'USDT'\n\nfunction App() {\n  const [loading, setLoading] = React.useState(true)\n  const [reload, setReload] = React.useState(0)\n  const [symbolFilter, setSymbolFilter] = React.useState(FILTER_SYMBOL)\n  const [refreshDelay, setRefreshDelay] = React.useState(MINIMUM_DELAY)\n  const [reloadPrevTicker, setReloadPrevTicker] = React.useState(0)\n  const [prices, setPrices] = React.useState([])\n  const [prevTicker, setPrevTicker] = React.useState([])\n  const [bestCoins, setBestCoins] = React.useState([])\n  const [worstCoins, setWorstCoins] = React.useState([])\n  const [startTime, setStartTime] = React.useState(0)\n  const [showChart, setShowChart] = React.useState(false)\n  const [chartSymbol, setChartSymbol] = React.useState(\"\")\n  \n  // Create interval to reload 24h variation, Save start time\n  React.useEffect(() => {\n    let prevTickerInterval = setInterval(() => setReloadPrevTicker(c => c + 1), (10000))\n    setStartTime(Date.now())\n    return () => clearInterval(prevTickerInterval)\n  }, [])\n  // Create an interval to reload prices\n  React.useEffect(() => { \n    let interval = setInterval(() => setReload(c => c + 1), (refreshDelay))\n    return () => clearInterval(interval)\n  }, [refreshDelay])\n  // On reloadPrevTicker, fetch binance API (24H Ticker)\n  React.useEffect(() => {\n    fetch('https://api.binance.com/api/v3/ticker/24hr')\n      .then(r => r.json())\n      .then(data => {\n        setPrevTicker(data)\n        setLoading(false)\n    })\n  }, [reloadPrevTicker])\n  // On reload, fetch binance API (current prices)\n  React.useEffect(() => {\n    fetch('https://api.binance.com/api/v3/ticker/price')\n      .then(r => r.json())\n      .then(data => {\n        data.forEach((line, i) => {\n          // At the first fetch (prices are still = [])\n          if (prices.length === 0) {\n            line.variation = 0\n            line.longVariation = 0\n          // For all next fetchs\n          } else {\n            // save previous price before changing prices\n            const previousPrice = prices[i].price\n            // Get stock variation (new price - previous price)\n            const stockVariation = data[i].price - previousPrice\n            // Calculate percent variation\n            const percentVariation = stockVariation * 100 / previousPrice\n            // set short variation\n            line.variation = Math.round(percentVariation * 1000) / 1000\n            // Calculate end set longVariation\n            const cumulVariation = prices[i].longVariation + line.variation\n            line.longVariation = cumulVariation\n          }\n        })\n        setPrices(data)\n      });\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [reload]);\n  // On API fetch (prices change), update best and worst coins\n  React.useEffect(() => {\n    const bestCoinsList = [...prices].filter(function(line) {\n      if (line.symbol.endsWith(symbolFilter))  {\n        if (!line.symbol.endsWith('UP' + symbolFilter)) {\n          if (!line.symbol.endsWith('DOWN' + symbolFilter)) {\n            return true\n          }\n        }\n      }\n      return false\n    })\n    const worstCoinsList = [...prices].filter(function(line) {\n      if (line.symbol.endsWith(symbolFilter))  {\n        if (!line.symbol.endsWith('UP' + symbolFilter)) {\n          if (!line.symbol.endsWith('DOWN' + symbolFilter)) {\n            return true\n          }\n        }\n      }\n      return false\n    })\n    bestCoinsList.sort((oneLine, anotherLine) => (\n      oneLine.longVariation < anotherLine.longVariation) ? 1 : -1\n    )\n    worstCoinsList.sort((oneLine, anotherLine) => (\n      oneLine.longVariation > anotherLine.longVariation) ? 1 : -1\n    )\n    setBestCoins(bestCoinsList.slice(0, 15))\n    setWorstCoins(worstCoinsList.slice(0, 15))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [prices])\n\n  // Handlers\n  const handleSettingsChange = (settings) => {\n    // Only refresh delay if > than minimal delay\n    if (settings.delay >= MINIMUM_DELAY / 1000) {\n      setRefreshDelay(settings.delay * 1000)\n    }\n    setSymbolFilter(settings.selectedSymbol)\n  }\n  const handleShowChart = (symbol) => {\n    setChartSymbol(symbol)\n    setShowChart(true)\n  }\n  const handleHideChart = () => {\n    setShowChart(false)\n  }\n\n  // Get settings from states, to send to settings component (nul ?)\n  const currentSettings = {\n    delay: refreshDelay,\n    symbol: symbolFilter\n  }\n  \n  if (loading) {\n    return <h1 id=\"initialLoading\">Loading data from binance API...</h1>\n  }\n  return <React.Fragment>\n    {/* CHART DIV (Shown / Hiden)*/}\n    {showChart ? <ChartBox symbol={chartSymbol} onClose={handleHideChart}/> : null}\n    {/* HEADER BAR */}\n    <TitleBar start={startTime}/>\n    {/* SETTINGS */}\n    <Settings settings={currentSettings} onSettingsChange={handleSettingsChange} minDelay={MINIMUM_DELAY}/>\n    {/* TABLES Champions/Loosers*/}\n    <div className=\"container\">\n      <div className=\"row align-items-start filteredTables\">\n        <div className=\"col-sm-6 championsTable\">\n          <PriceTable \n            title={\"Champions\"} \n            prices={bestCoins} \n            prevTicker={prevTicker}\n            onOpenChart={handleShowChart}/>\n        </div>\n        <div className=\"col-sm-6\">\n          <PriceTable \n            title={\"Loosers\"} \n            prices={worstCoins} \n            prevTicker={prevTicker}\n            onOpenChart={handleShowChart}/>\n        </div>\n      </div>\n      {/* TABLE ALL COINS */}\n      <PriceTable \n        title={\"All Market\"} \n        prices={prices} \n        prevTicker={prevTicker}\n        onOpenChart={handleShowChart}/>\n    </div>\n  </React.Fragment>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}