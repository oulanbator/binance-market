{"version":3,"sources":["components/PriceTable.jsx","components/Utils.jsx","components/Chart.jsx","components/Settings.jsx","components/TitleBar.jsx","App.js","index.js"],"names":["Row","data","prevTicker","onSymbolClick","favorites","onFavoriteClick","variationType","symbolRef","React","handleFavoriteClick","e","preventDefault","current","children","innerText","variation24","forEach","key","i","symbol","priceChangePercent","isFavorite","length","roundedPrice","Math","round","price","href","onClick","className","ref","target","text","variation","cumulativeVariation","absoluteVariation","Table","rows","line","push","id","PriceTable","prices","title","onOpenChart","onFavoriteChange","icon","iconString","SearchBar","onSubmit","onReload","search","setSearch","type","placeholder","aria-label","aria-describedby","value","onChange","toUpperCase","GlobalPriceTable","filteredPrices","setFilteredPrices","result","filter","Loader","role","Chart","interval","chartDiv","LightweightCharts","window","candleSeries","createChart","width","offsetWidth","height","offsetHeight","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","crosshair","mode","CrosshairMode","Normal","rightPriceScale","borderColor","timeScale","addCandlestickSeries","upColor","downColor","borderDownColor","borderUpColor","wickDownColor","wickUpColor","setData","WebSocket","onmessage","event","newCandle","JSON","parse","k","update","time","t","open","o","high","h","low","l","close","c","ChartBox","onClose","loading","setLoading","error","setError","timeframe","setTimeFrame","fetch","then","r","json","errorStatus","handleTimeClick","toLowerCase","disabled","RadioButton","name","checked","readOnly","htmlFor","Settings","settings","onSettingsChange","minDelay","delay","setDelay","selectedSymbol","setSelectedSymbol","TitleBar","start","reload","setReload","setTime","timerInterval","setInterval","clearInterval","timeSpend","Date","now","timeString","minutes","trunc","milliseconds","seconds","hours","minutesLeft","secondsLeft","MINIMUM_DELAY","App","symbolFilter","setSymbolFilter","refreshDelay","setRefreshDelay","reloadPrevTicker","setReloadPrevTicker","setPrices","setPrevTicker","bestCoins","setBestCoins","worstCoins","setWorstCoins","onfireCoins","setOnfireCoins","steadyCoins","setSteadyCoins","setFavorites","favCoin","setFavCoin","startTime","setStartTime","showChart","setShowChart","chartSymbol","setChartSymbol","prevTickerInterval","previousPrice","percentVariation","cumulVariation","absVariation","abs","bestCoinsList","endsWith","worstCoinsList","onfireCoinsList","steadyCoinsList","parseFloat","favoriteCoins","sort","oneLine","anotherLine","slice","handleShowChart","handleFavoriteChange","newFavCoin","splice","currentSettings","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.471f2e72.chunk.js","sourcesContent":["import * as React from 'react'\nimport './pricetable.css'\n\nconst Row = ({data, prevTicker, onSymbolClick, favorites, onFavoriteClick, variationType}) => {\n    const symbolRef = React.useRef('')\n\n    const handleSymbolClick = (e) => {\n        e.preventDefault()\n        onSymbolClick(e.target.text)\n    }\n    const handleFavoriteClick = (e) => {\n        e.preventDefault()\n        onFavoriteClick(symbolRef.current.children[0].innerText)\n    }\n    // get 24hour variation pour ticker \n    let variation24 = 0\n    prevTicker.forEach((key, i) => {\n        if (key.symbol === data.symbol) {\n            variation24 = key.priceChangePercent\n        }\n    })\n    // Get favorite status\n    let isFavorite = false\n    for (let i = 0 ; i < favorites.length ; i++) {\n        if (data.symbol === favorites[i]) {\n            isFavorite = true\n        }\n    }\n    const roundedPrice = Math.round(data.price * 100000) / 100000\n    return <tr>\n        {/* Favorite icon */}\n        <td>\n            {isFavorite ?\n            <a href=\"/#\" onClick={handleFavoriteClick}><i className=\"fas fa-star text-warning\"></i></a> :\n            <a href=\"/#\" onClick={handleFavoriteClick}><i className=\"far fa-star text-warning\"></i></a>}\n        </td>\n        {/* Symbol */}\n        <td ref={symbolRef}><a href=\"/#\" onClick={handleSymbolClick}>{data.symbol}</a></td>\n        {/* Price */}\n        <td>{roundedPrice}</td>\n        {/* Instant Variation */}\n        {data.variation > 0 ? \n            <td className=\"text-success\">{data.variation}</td> :\n            <td className=\"text-danger\">{data.variation}</td>\n        }\n        {/* App lifetime Variation */}\n        {variationType === \"cumulative\" ? <td>{Math.round(data.cumulativeVariation * 100) / 100}</td> : null}\n        {variationType === \"absolute\" ? <td>{Math.round(data.absoluteVariation * 100) / 100}</td> : null}\n        {/* 24 hours variation */}\n        <td>{variation24}</td>\n    </tr>\n}\n\nconst Table = ({data, prevTicker, onSymbolClick, favorites, onFavoriteClick, variationType}) => {\n    // Build table rows\n    let rows = []\n    data.forEach((line, i) => {\n        rows.push(<Row key={i} \n                    data={line}\n                    variationType={variationType} \n                    prevTicker={prevTicker} \n                    onSymbolClick={onSymbolClick} \n                    favorites={favorites}\n                    onFavoriteClick={onFavoriteClick}/>)\n    })\n    if (data.length === 0) {\n        return <div className=\"emptyTable\"></div>\n    }\n    return <table id=\"priceTable\" className=\"table\">\n        <thead>\n            <tr>\n                <th></th>\n                <th>Symbol</th>\n                <th>Price</th>\n                <th>Last %</th>\n                {variationType === \"cumulative\" ?\n                    <th><span className=\"text-warning\">Cumul. %</span></th> :\n                    <th><span className=\"text-warning\">Absol. %</span></th>\n                }\n                <th>24h %</th>\n            </tr>\n        </thead>\n        <tbody>\n            {rows}\n        </tbody>\n    </table>\n}\n\nexport const PriceTable = ({prices, title, prevTicker, onOpenChart, favorites, onFavoriteChange, variationType=\"cumulative\", icon=null}) => {\n    const iconString = \"fas fa-\" + icon\n    return <React.Fragment>\n        {title && icon ? <h2>{title} <i className={iconString}></i></h2> : \n            title ? <h2>{title}</h2> : null\n        }\n        <Table data={prices}\n            variationType={variationType} \n            prevTicker={prevTicker} \n            onSymbolClick={onOpenChart} \n            favorites={favorites}\n            onFavoriteClick={onFavoriteChange}\n            icon={icon}/>\n    </React.Fragment>\n}\n\nconst SearchBar = ({onSubmit, onReload}) => {\n    const [search, setSearch] = React.useState('')\n    const handleSearch = (e) => {\n        e.preventDefault()\n        setSearch((e.target.value).toUpperCase())\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        onSubmit(search)\n        setSearch('')\n    }\n    return <div className=\"input-group globalTableSearch\">\n        <input type=\"text\" \n            className=\"form-control\" \n            placeholder=\"Search for a coin...\" \n            aria-label=\"Search\" \n            aria-describedby=\"searchButton\"\n            value={search}\n            onChange={handleSearch} />\n            <button className=\"btn btn-outline-primary\" type=\"button\" id=\"searchButton\" onClick={handleSubmit}>\n                <i className=\"fas fa-search\"></i>\n            </button>\n    </div>\n}\nexport const GlobalPriceTable = ({prices, title, prevTicker, onOpenChart, favorites, onFavoriteChange, variationType=\"cumulative\", icon=null}) => {\n    const [filteredPrices, setFilteredPrices] = React.useState([])\n    const handleFilterCoins = (search) => {\n        const result = [...prices].filter(function(line) {\n            if (line.symbol.search(search) > -1) {\n                return true\n            } else {\n                return false\n            }\n        })\n        setFilteredPrices(result)\n    }\n    return <React.Fragment>\n        <h2 className=\"AllMarketTable\">{title}</h2>\n        <SearchBar onSubmit={handleFilterCoins}/>\n        <PriceTable \n            prices={filteredPrices} \n            variationType={variationType} \n            prevTicker={prevTicker}\n            onOpenChart={onOpenChart}\n            favorites={favorites}\n            onFavoriteChange={onFavoriteChange}\n            icon={icon}/>\n    </React.Fragment>\n}","import * as React from 'react'\n\nexport const Loader = () => {\n    return <div className=\"spinner-border text-warning\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n    </div>\n}\n\n\n\n","import * as React from 'react'\nimport './chart.css'\nimport {Loader} from './Utils'\n\nconst Chart = ({data, symbol, interval}) => {\n    const chartDiv = React.useRef(null)\n    // On mount, setup Chart\n    React.useEffect(() => {\n        // Set chart options\n        const LightweightCharts = window.LightweightCharts        \n        const chart = LightweightCharts.createChart(chartDiv.current, {\n            width: chartDiv.current.offsetWidth,\n            height: chartDiv.current.offsetHeight,\n            layout: {\n                backgroundColor: '#FFF',\n                textColor: '#000',\n            },\n            grid: {\n                vertLines: {color: 'rgba(197, 203, 206, 0.5)',},\n                horzLines: {color: 'rgba(197, 203, 206, 0.5)',},\n            },\n            crosshair: {mode: LightweightCharts.CrosshairMode.Normal,},\n            rightPriceScale: {borderColor: 'rgba(197, 203, 206, 0.8)',},\n            timeScale: {borderColor: 'rgba(197, 203, 206, 0.8)',},\n        });\n        // Set candleSeries object\n        let candleSeries = chart.addCandlestickSeries({\n            upColor: 'rgba(0, 255, 0, 1)',\n            downColor: 'rgba(255, 0, 0, 1)',\n            borderDownColor: 'rgba(255, 0, 0, 1)',\n            borderUpColor: 'rgba(0, 255, 0, 1)',\n            wickDownColor: 'rgba(255, 0, 0, 1)',\n            wickUpColor: 'rgba(0, 255, 0, 1)'\n        });\n        // Give historical data to candleSeries\n        candleSeries.setData(data)\n        // Set socket connection, on message update candleSeries\n        const url = \"wss://stream.binance.com:9443/ws/\" + symbol + \"@kline_\" + interval\n        const socket = new WebSocket(url)\n        socket.onmessage = function (event) {\n            const messageObject = JSON.parse(event.data)\n            const newCandle = messageObject.k\n            candleSeries.update({\n                time: newCandle.t / 1000,\n                open: newCandle.o,\n                high: newCandle.h,\n                low: newCandle.l,\n                close: newCandle.c\n            })\n        }\n    }, [data, symbol, interval]);\n    return <div id=\"Chart\" ref={chartDiv}></div>\n}\n\nconst ChartBox = ({onClose, symbol}) => {\n    const [loading, setLoading] = React.useState(true)\n    const [error, setError] = React.useState(false)\n    const [data, setData] = React.useState([])\n    const [timeframe, setTimeFrame] = React.useState(\"5m\")\n    \n    React.useEffect(() => {\n        const url = \"/api/history/\" + symbol + \"/\" + timeframe\n        fetch(url).then(r => r.json()).then(data => {\n            if (data.errorStatus) {\n                setError(true)\n            } else {\n                setData(data)\n                setLoading(false)\n            } \n        });\n    }, [symbol, timeframe])\n\n    const handleCloseClick = (e) => {\n        e.preventDefault()\n        onClose()\n    }\n    const handleTimeClick = (e) => {\n        e.preventDefault()\n        setLoading(true)\n        setTimeFrame(e.target.innerText)\n    }\n    return <div id=\"chartBox\">\n        <a href=\"/#\" onClick={handleCloseClick} id=\"chartCloser\"><i className=\"fas fa-times-circle\"></i></a>\n        {loading ? <Loader/> : <>\n            <div id=\"chartTitle\">\n                <h3>{symbol} ({timeframe})</h3>\n            </div>\n            <Chart data={data} symbol={symbol.toLowerCase()} interval={timeframe}/>\n            <div id=\"chartTimeframe\">\n                <button onClick={handleTimeClick} disabled={timeframe===\"1m\"}>1m</button>\n                <button onClick={handleTimeClick} disabled={timeframe===\"5m\"}>5m</button>\n                <button onClick={handleTimeClick} disabled={timeframe===\"15m\"}>15m</button>\n                <button onClick={handleTimeClick} disabled={timeframe===\"1h\"}>1h</button>\n                <button onClick={handleTimeClick} disabled={timeframe===\"1d\"}>1d</button>\n            </div>\n        </>}\n        {error ? <h2>Error.. Try again..</h2> : null}\n    </div>\n}\n\nexport default ChartBox;","import * as React from 'react'\nimport './settings.css'\n\nconst RadioButton = ({ name, checked }) => {\n    return <div className=\"form-check\">\n        <input className=\"form-check-input\" type=\"radio\" name={name} id={name} checked={checked} readOnly />\n        <label className=\"form-check-label\" htmlFor={name}>{name}</label>\n    </div>\n}\n\nconst Settings = ({ settings, onSettingsChange, minDelay }) => {\n    const [delay, setDelay] = React.useState(settings.delay / 1000)\n    const [selectedSymbol, setSelectedSymbol] = React.useState(\"USDT\")\n    const handleChangeDelay = (e) => {\n        e.preventDefault()\n        setDelay(e.target.value)\n    }\n    const handleSubmitClick = (e) => {\n        e.preventDefault()\n        const settings = {\n            delay: delay,\n            selectedSymbol: selectedSymbol\n        }\n        onSettingsChange(settings)\n    }\n    const handleChangeSymbol = (e) => {\n        setSelectedSymbol(e.target.name)\n    }\n    // return <div className=\"settingsBar\">\n    //     <div className=\"barHeader\">\n    //         <div>\n    //             <h2>Settings</h2>\n    //         </div>\n    //         <div className=\"currentValues\">\n    //             <div>Current symbol filter : {settings.symbol}</div>\n    //             <div>Current refresh delay : {settings.delay / 1000} secs</div>\n    //         </div>\n    //     </div>\n    //     <form className=\"barItems\">\n    //         <div className=\"form-group setSymbol\" onChange={handleChangeSymbol}>\n    //             <label>Filter symbol pairs</label>\n    //             <RadioButton name=\"USDT\" checked={selectedSymbol === \"USDT\"} />\n    //             <RadioButton name=\"BTC\" checked={selectedSymbol === \"BTC\"} />\n    //         </div>\n    //         <div className=\"form-group setDelay\">\n    //             <label htmlFor=\"refreshDelayInput\" className=\"form-label\">Refresh prices (min : {minDelay / 1000} secs)</label>\n    //             <input type=\"text\" id=\"refreshDelayInput\" className=\"form-control\" value={delay} onChange={handleChangeDelay} />\n    //         </div>\n    //         <button className=\"btn btn-info setSubmit\" onClick={handleSubmitClick}>Set</button>\n    //     </form>\n    // </div>\n    return <div className=\"settingsBar\">\n        <div className=\"barTitle\">\n            <h2>Settings</h2>\n        </div>\n        <div className=\"currentValues\">\n            <div>Current symbol filter : {settings.symbol}</div>\n            <div>Current refresh delay : {settings.delay / 1000} secs</div>\n        </div>\n        <div className=\"form-group setSymbol\" onChange={handleChangeSymbol}>\n            <label className=\"setSymbolLabel\">Filter symbol pairs</label>\n            <RadioButton name=\"USDT\" checked={selectedSymbol === \"USDT\"} />\n            <RadioButton name=\"BTC\" checked={selectedSymbol === \"BTC\"} />\n        </div>\n        <div className=\"form-group setDelay\">\n            <label className=\"setDelayLabel\">Refresh prices (min : {minDelay / 1000} secs)</label>\n            <input type=\"text\" id=\"refreshDelayInput\" className=\"form-control refreshDelayInput\" value={delay} onChange={handleChangeDelay} />\n        </div>\n        <div className=\"submitButton\">\n            <button className=\"btn btn-info btn-submit\" onClick={handleSubmitClick}>Set</button>\n        </div>\n\n    </div>\n}\n\nexport default Settings;","import * as React from 'react'\n\nconst TitleBar = ({start}) => {\n    const [reload, setReload] = React.useState(0)\n    const [time, setTime] = React.useState('')\n    // Create an interval to reload prices\n    React.useEffect(() => { \n      let timerInterval = setInterval(() => setReload(c => c + 1), (1000))\n      return () => clearInterval(timerInterval)\n    }, [])\n    React.useEffect(() => {\n      const timeSpend = Date.now() - start\n      // if less than 1 minute\n      if ((timeSpend / 1000) < 60) {\n        const timeString = Math.round(timeSpend / 1000) + \" s\"\n        setTime(timeString)\n      // if less than 1 hour\n      } else if ((timeSpend / 1000) < 3600) {\n        const minutes = Math.trunc(timeSpend / 1000 / 60)\n        const milliseconds = (timeSpend - (minutes * 60 * 1000))\n        const seconds = Math.round(milliseconds / 1000)\n        const timeString = minutes + \"m \" + seconds + \"s\"\n        setTime(timeString)\n      // if more than 1 hours\n      } else {\n        const hours = Math.trunc(timeSpend / 1000 / 60 / 60)\n        const minutesLeft = timeSpend - (hours * 3600 * 1000)\n        const minutes = Math.trunc(minutesLeft / 1000 / 60)\n        const secondsLeft = minutesLeft - (minutes * 60 * 1000)\n        // const milliseconds = (timeSpend - (minutes * 60 * 1000))\n        const seconds = Math.round(secondsLeft / 1000)\n        const timeString = hours + \"h \" + minutes + \"m \" + seconds + \"s\"\n        setTime(timeString)\n      }\n    }, [reload, start])\n    \n    return <div className=\"titleBar text-warning\">\n      <div>\n        <h1>Binance Market</h1>\n      </div>\n      <div className=\"timeSpendDiv\">\n        <h3>Time spend : {time}</h3>\n      </div>\n    </div>\n  }\n\n  export default TitleBar;","import * as React from 'react'\nimport {PriceTable, GlobalPriceTable} from './components/PriceTable'\nimport ChartBox from './components/Chart'\nimport Settings from './components/Settings'\nimport TitleBar from './components/TitleBar'\n\nconst MINIMUM_DELAY = 3000\nconst FILTER_SYMBOL = 'USDT'\n\n// const fetchPrices = (prices) => {\n//   fetch('https://api.binance.com/api/v3/ticker/price')\n//     .then(r => r.json())\n//     .then(data => {\n//       data.forEach((line, i) => {\n//         // At the first fetch (prices are still = [])\n//         if (prices.length === 0) {\n//           line.variation = 0\n//           line.cumulativeVariation = 0\n//         // For all next fetchs\n//         } else {\n//           // save previous price before changing prices\n//           const previousPrice = prices[i].price\n//           // Get stock variation (new price - previous price)\n//           const stockVariation = data[i].price - previousPrice\n//           // Calculate percent variation\n//           const percentVariation = stockVariation * 100 / previousPrice\n//           // set short variation\n//           line.variation = Math.round(percentVariation * 1000) / 1000\n//           // Calculate end set cumulativeVariation\n//           const cumulVariation = prices[i].cumulativeVariation + line.variation\n//           line.cumulativeVariation = cumulVariation\n//         }\n//       })\n//       return data\n//     });\n// }\n\nfunction App() {\n  const [loading, setLoading] = React.useState(true)\n  const [reload, setReload] = React.useState(0)\n  const [symbolFilter, setSymbolFilter] = React.useState(FILTER_SYMBOL)\n  const [refreshDelay, setRefreshDelay] = React.useState(MINIMUM_DELAY)\n  const [reloadPrevTicker, setReloadPrevTicker] = React.useState(0)\n  const [prices, setPrices] = React.useState([])\n  const [prevTicker, setPrevTicker] = React.useState([])\n  const [bestCoins, setBestCoins] = React.useState([])\n  const [worstCoins, setWorstCoins] = React.useState([])\n  const [onfireCoins, setOnfireCoins] = React.useState([])\n  const [steadyCoins, setSteadyCoins] = React.useState([])\n  const [favorites, setFavorites] = React.useState([])\n  const [favCoin, setFavCoin] = React.useState([])\n  const [startTime, setStartTime] = React.useState(0)\n  const [showChart, setShowChart] = React.useState(false)\n  const [chartSymbol, setChartSymbol] = React.useState(\"\")\n  \n  // Create interval to reload 24h variation, Save start time\n  React.useEffect(() => {\n    let prevTickerInterval = setInterval(() => setReloadPrevTicker(c => c + 1), (10000))\n    setStartTime(Date.now())\n    return () => clearInterval(prevTickerInterval)\n  }, [])\n  // Create an interval for reloading prices\n  React.useEffect(() => { \n    let interval = setInterval(() => setReload(c => c + 1), (refreshDelay))\n    return () => clearInterval(interval)\n  }, [refreshDelay])\n  // On reloadPrevTicker, fetch binance API (24H Ticker)\n  React.useEffect(() => {\n    fetch('https://api.binance.com/api/v3/ticker/24hr')\n      .then(r => r.json())\n      .then(data => {\n        // let reloadPrices = [...prices]\n        // // loop on response data\n        // for (let i = 0 ; i < data.length ; i++) {\n        //   // loop on real-time prices\n        //   for (let j = 0 ; j < reloadPrices.length ; j++) {\n        //     // compare symbols\n        //     if (data[i].symbol === reloadPrices[j].symbol) {\n        //       // reloadPrices[j].prevTickerVariation = 0\n        //       reloadPrices[j].prevTickerVariation = parseFloat(data[i].priceChangePercent)\n        //       // console.log(reloadPrices[j])\n        //     }\n        //   }\n        // }\n        // setPrices(reloadPrices)\n        setPrevTicker(data)\n        setLoading(false)\n    })\n  }, [reloadPrevTicker])\n  // On reload, fetch binance API (current prices)\n  React.useEffect(() => {\n    fetch('https://api.binance.com/api/v3/ticker/price')\n      .then(r => r.json())\n      .then(data => {\n        data.forEach((line, i) => {\n          // At the first fetch (prices are still = [])\n          if (prices.length === 0) {\n            line.variation = 0\n            line.cumulativeVariation = 0\n            line.absoluteVariation = 0\n          // For all next fetchs\n          } else {\n            // save previous price before changing prices\n            const previousPrice = prices[i].price\n            // Get stock variation (new price - previous price)\n            const stockVariation = data[i].price - previousPrice\n            // Calculate percent variation\n            const percentVariation = stockVariation * 100 / previousPrice\n            // set short variation\n            line.variation = Math.round(percentVariation * 1000) / 1000\n            // Calculate cumulativeVariation and absoluteVariation\n            const cumulVariation = prices[i].cumulativeVariation + line.variation\n            const absVariation = prices[i].absoluteVariation + Math.abs(line.variation)\n            // Set them to the line\n            line.cumulativeVariation = cumulVariation\n            line.absoluteVariation = absVariation\n          }\n        })\n        setPrices(data)\n      });\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [reload]);\n  // On API fetch (prices change), update favorites, steady and best/worst coins\n  React.useEffect(() => {\n    // FILTER LISTS (from fetched prices)\n    const bestCoinsList = [...prices].filter(function(line) {\n      if (line.symbol.endsWith(symbolFilter))  {\n        if (!line.symbol.endsWith('UP' + symbolFilter)) {\n          if (!line.symbol.endsWith('DOWN' + symbolFilter)) {\n            return true\n          }\n        }\n      }\n      return false\n    })\n    const worstCoinsList = [...prices].filter(function(line) {\n      if (line.symbol.endsWith(symbolFilter))  {\n        if (!line.symbol.endsWith('UP' + symbolFilter)) {\n          if (!line.symbol.endsWith('DOWN' + symbolFilter)) {\n            return true\n          }\n        }\n      }\n      return false\n    })\n    const onfireCoinsList = [...prices].filter(function(line) {\n      if (line.symbol.endsWith(symbolFilter))  {\n        if (!line.symbol.endsWith('UP' + symbolFilter)) {\n          if (!line.symbol.endsWith('DOWN' + symbolFilter)) {\n            if (!line.symbol.endsWith('BTCST' + symbolFilter)) {\n              // for (let i = 0 ; i < prevTicker.length ; i++) {\n              //   if (prevTicker[i].symbol === line.symbol) {\n              //     const percentChange = parseFloat(prevTicker[i].priceChangePercent)\n              //     if (percentChange !== 0) {\n              //       return true\n              //     }\n              //   }\n              // }\n              return true\n            }\n          }\n        }\n      }\n      return false\n    })\n    const steadyCoinsList = [...prices].filter(function(line) {\n      if (line.symbol.endsWith(symbolFilter))  {\n        if (!line.symbol.endsWith('UP' + symbolFilter)) {\n          if (!line.symbol.endsWith('DOWN' + symbolFilter)) {\n            if (!line.symbol.endsWith('BTCST' + symbolFilter)) {\n              for (let i = 0 ; i < prevTicker.length ; i++) {\n                if (prevTicker[i].symbol === line.symbol) {\n                  const percentChange = parseFloat(prevTicker[i].priceChangePercent)\n                  if (percentChange !== 0) {\n                    return true\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      return false\n    })\n    const favoriteCoins = [...prices].filter(function(line) {\n      for (let i = 0 ; i < favCoin.length ; i++) {\n        if (line.symbol === favCoin[i]) {\n          return true\n        }\n      }\n      return false\n    })\n    // SORT LISTS\n    bestCoinsList.sort((oneLine, anotherLine) => (\n      oneLine.cumulativeVariation < anotherLine.cumulativeVariation) ? 1 : -1\n    )\n    worstCoinsList.sort((oneLine, anotherLine) => (\n      oneLine.cumulativeVariation > anotherLine.cumulativeVariation) ? 1 : -1\n    )\n    onfireCoinsList.sort((oneLine, anotherLine) => (\n      oneLine.absoluteVariation < anotherLine.absoluteVariation) ? 1 : -1\n    )\n    steadyCoinsList.sort((oneLine, anotherLine) => (\n      oneLine.absoluteVariation > anotherLine.absoluteVariation) ? 1 : -1\n    )\n    // UPDATE STATES\n    setBestCoins(bestCoinsList.slice(0, 15))\n    setWorstCoins(worstCoinsList.slice(0, 15))\n    setOnfireCoins(onfireCoinsList.slice(0, 15))\n    setSteadyCoins(steadyCoinsList.slice(0, 15))\n    setFavorites(favoriteCoins)\n  }, [prices, prevTicker, favCoin, symbolFilter])\n\n  // HANDLERS\n  const handleSettingsChange = (settings) => {\n    // Only refresh delay if > than minimal delay\n    if (settings.delay >= MINIMUM_DELAY / 1000) {\n      setRefreshDelay(settings.delay * 1000)\n    }\n    setSymbolFilter(settings.selectedSymbol)\n  }\n  const handleShowChart = (symbol) => {\n    setChartSymbol(symbol)\n    setShowChart(true)\n  }\n  const handleHideChart = () => {\n    setShowChart(false)\n  }\n  const handleFavoriteChange = (symbol) => {\n    // if symbol in favorites, delete it\n    for (let i = 0; i < favCoin.length; i++) {\n      if (favCoin[i] === symbol) {\n        let newFavCoin = [...favCoin]\n        newFavCoin.splice(i, 1)\n        setFavCoin(newFavCoin)\n        return\n      }\n    }\n    // if not, push it\n    let newFavCoin = [...favCoin]\n    newFavCoin.push(symbol)\n    setFavCoin(newFavCoin)\n  }\n\n  // Get settings from states, to send to settings component (nul ?)\n  const currentSettings = {\n    delay: refreshDelay,\n    symbol: symbolFilter\n  }\n  \n  if (loading) {\n    return <h1 id=\"initialLoading\">Loading data from binance API...</h1>\n  }\n  return <React.Fragment>\n    {/* CHART DIV (Shown / Hiden)*/}\n    {showChart ? <ChartBox symbol={chartSymbol} onClose={handleHideChart}/> : null}\n    {/* HEADER BAR */}\n    <TitleBar start={startTime}/>\n    {/* SETTINGS */}\n    <Settings settings={currentSettings} onSettingsChange={handleSettingsChange} minDelay={MINIMUM_DELAY}/>\n    {/* TABLES Champions/Loosers*/}\n    <div className=\"container\">\n      <div className=\"row align-items-start filteredTables\">\n        <div className=\"col-sm-6 leftTable\">\n          <PriceTable \n            title={\"Champions\"} \n            prices={bestCoins}\n            prevTicker={prevTicker}\n            onOpenChart={handleShowChart}\n            favorites={favCoin}\n            onFavoriteChange={handleFavoriteChange}\n            icon={(\"chart-line text-success\")}/>\n        </div>\n        <div className=\"col-sm-6\">\n          <PriceTable \n            title={\"Loosers\"} \n            prices={worstCoins} \n            prevTicker={prevTicker}\n            onOpenChart={handleShowChart}\n            favorites={favCoin}\n            onFavoriteChange={handleFavoriteChange}\n            icon={(\"chart-line text-danger\")}/>\n        </div>\n      </div>\n      <div className=\"row align-items-start filteredTables\">\n        <div className=\"col-sm-6 leftTable\">\n        <PriceTable \n            title={\"Coins on Fire\"} \n            prices={onfireCoins} \n            variationType={\"absolute\"}\n            prevTicker={prevTicker}\n            onOpenChart={handleShowChart}\n            favorites={favCoin}\n            onFavoriteChange={handleFavoriteChange}\n            icon={(\"fire-alt text-warning\")}/>\n        </div>\n        <div className=\"col-sm-6\">\n          <PriceTable \n            title={\"Steady Coins\"} \n            prices={steadyCoins} \n            variationType={\"absolute\"}\n            prevTicker={prevTicker}\n            onOpenChart={handleShowChart}\n            favorites={favCoin}\n            onFavoriteChange={handleFavoriteChange}\n            icon={(\"snowflake text-primary\")}/>\n        </div>\n      </div>\n      {/* FAVORITES */}\n      <PriceTable \n          title={\"Favorites\"} \n          prices={favorites} \n          prevTicker={prevTicker}\n          onOpenChart={handleShowChart}\n          favorites={favCoin}\n          onFavoriteChange={handleFavoriteChange}\n          icon={(\"star text-warning\")}/>\n      {/* TABLE ALL COINS */}\n      <GlobalPriceTable \n        title={\"All Market\"} \n        prices={prices} \n        prevTicker={prevTicker}\n        onOpenChart={handleShowChart}\n        favorites={favCoin}\n        onFavoriteChange={handleFavoriteChange}/>\n    </div>\n  </React.Fragment>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}